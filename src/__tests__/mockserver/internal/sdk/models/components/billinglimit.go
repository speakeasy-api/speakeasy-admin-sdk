// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

type BillingLimit struct {
	// The unique identifier for the organization.
	OrganizationID string `json:"organization_id"`
	// The type of target for the billing limit.
	TargetType string `json:"target_type"`
	// The maximum allowed operations.
	OperationLimit int64 `json:"operation_limit"`
	// Whether exceeding the limit blocks operations.
	Blocking bool `json:"blocking"`
	// The timestamp when the limit was created.
	CreatedAt time.Time `json:"created_at"`
	// The timestamp when the limit was last updated.
	UpdatedAt time.Time `json:"updated_at"`
}

func (b BillingLimit) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BillingLimit) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BillingLimit) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *BillingLimit) GetTargetType() string {
	if o == nil {
		return ""
	}
	return o.TargetType
}

func (o *BillingLimit) GetOperationLimit() int64 {
	if o == nil {
		return 0
	}
	return o.OperationLimit
}

func (o *BillingLimit) GetBlocking() bool {
	if o == nil {
		return false
	}
	return o.Blocking
}

func (o *BillingLimit) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *BillingLimit) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}
