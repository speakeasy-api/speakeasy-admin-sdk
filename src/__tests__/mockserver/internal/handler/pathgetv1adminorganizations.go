// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetV1AdminOrganizations(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "getOrganizations[0]":
			dir.HandlerFunc("getOrganizations", testGetOrganizationsGetOrganizations0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testGetOrganizationsGetOrganizations0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityHeader(req, "x-api-key", false); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := []components.Organization{
		components.Organization{
			ID:                "<id>",
			Name:              "<value>",
			Slug:              "<value>",
			AccountType:       components.AccountTypeBusiness,
			TelemetryDisabled: true,
			CreatedAt:         types.MustTimeFromString("2025-07-20T02:15:22.955Z"),
			UpdatedAt:         types.MustTimeFromString("2023-12-13T01:57:34.413Z"),
			SsoActivated:      true,
		},
		components.Organization{
			ID:                "<id>",
			Name:              "<value>",
			Slug:              "<value>",
			AccountType:       components.AccountTypeScaleUp,
			TelemetryDisabled: false,
			CreatedAt:         types.MustTimeFromString("2023-05-10T06:17:29.421Z"),
			UpdatedAt:         types.MustTimeFromString("2025-10-25T04:08:09.949Z"),
			SsoActivated:      false,
		},
		components.Organization{
			ID:                "<id>",
			Name:              "<value>",
			Slug:              "<value>",
			AccountType:       components.AccountTypeBusiness,
			TelemetryDisabled: false,
			CreatedAt:         types.MustTimeFromString("2025-01-01T16:21:27.523Z"),
			UpdatedAt:         types.MustTimeFromString("2025-04-11T15:08:17.681Z"),
			SsoActivated:      false,
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
