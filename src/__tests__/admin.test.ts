/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { SpeakeasyAdmin } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Admin Get Organizations", async () => {
  const testHttpClient = createTestHTTPClient("getOrganizations");

  const speakeasyAdmin = new SpeakeasyAdmin({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["SPEAKEASY_API_KEY"] ?? "value",
  });

  const result = await speakeasyAdmin.admin.getOrganizations({});
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      id: "<id>",
      name: "<value>",
      slug: "<value>",
      accountType: "business",
      telemetryDisabled: true,
      createdAt: new Date("2025-07-20T02:15:22.955Z"),
      updatedAt: new Date("2023-12-13T01:57:34.413Z"),
      ssoActivated: true,
    },
    {
      id: "<id>",
      name: "<value>",
      slug: "<value>",
      accountType: "scale-up",
      telemetryDisabled: false,
      createdAt: new Date("2023-05-10T06:17:29.421Z"),
      updatedAt: new Date("2025-10-25T04:08:09.949Z"),
      ssoActivated: false,
    },
    {
      id: "<id>",
      name: "<value>",
      slug: "<value>",
      accountType: "business",
      telemetryDisabled: false,
      createdAt: new Date("2025-01-01T16:21:27.523Z"),
      updatedAt: new Date("2025-04-11T15:08:17.681Z"),
      ssoActivated: false,
    },
  ]);
});

test("Admin Get Organization Workspaces", async () => {
  const testHttpClient = createTestHTTPClient("getOrganizationWorkspaces");

  const speakeasyAdmin = new SpeakeasyAdmin({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["SPEAKEASY_API_KEY"] ?? "value",
  });

  const result = await speakeasyAdmin.admin.getOrganizationWorkspaces({
    organizationID: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      createdAt: new Date("2024-10-08T01:46:30.928Z"),
      id: "<id>",
      name: "<value>",
      organizationId: "<id>",
      slug: "<value>",
      updatedAt: new Date("2025-04-25T23:02:20.472Z"),
      verified: false,
    },
  ]);
});

test("Admin Get Organization Billing Limits", async () => {
  const testHttpClient = createTestHTTPClient("getOrganizationBillingLimits");

  const speakeasyAdmin = new SpeakeasyAdmin({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["SPEAKEASY_API_KEY"] ?? "value",
  });

  const result = await speakeasyAdmin.admin.getOrganizationBillingLimits({
    organizationID: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    billingLimits: [
      {
        organizationId: "<id>",
        targetType: "<value>",
        operationLimit: 244756,
        blocking: false,
        createdAt: new Date("2023-03-10T15:04:21.238Z"),
        updatedAt: new Date("2023-10-22T16:18:01.116Z"),
      },
    ],
  });
});

test("Admin Get Organization Usage", async () => {
  const testHttpClient = createTestHTTPClient("getOrganizationUsage");

  const speakeasyAdmin = new SpeakeasyAdmin({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["SPEAKEASY_API_KEY"] ?? "value",
  });

  const result = await speakeasyAdmin.admin.getOrganizationUsage({
    organizationID: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    usage: [],
    totalAllowedLanguages: 787633,
    allowedLanguages: [
      "<value>",
      "<value>",
    ],
  });
});

test("Admin Get Add Ons", async () => {
  const testHttpClient = createTestHTTPClient("getAddOns");

  const speakeasyAdmin = new SpeakeasyAdmin({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["SPEAKEASY_API_KEY"] ?? "value",
  });

  const result = await speakeasyAdmin.admin.getAddOns({});
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      organizationId: "<id>",
      addOn: "sdk_testing",
      createdAt: new Date("2024-01-31T10:49:15.708Z"),
    },
  ]);
});

test("Admin Get Organization Add Ons", async () => {
  const testHttpClient = createTestHTTPClient("getOrganizationAddOns");

  const speakeasyAdmin = new SpeakeasyAdmin({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["SPEAKEASY_API_KEY"] ?? "value",
  });

  const result = await speakeasyAdmin.admin.getOrganizationAddOns({
    organizationID: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    addOns: [
      "webhooks",
    ],
  });
});

test("Admin Get Users", async () => {
  const testHttpClient = createTestHTTPClient("getUsers");

  const speakeasyAdmin = new SpeakeasyAdmin({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["SPEAKEASY_API_KEY"] ?? "value",
  });

  const result = await speakeasyAdmin.admin.getUsers({});
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      id: "<id>",
      email: "Solon.Botsford28@yahoo.com",
      emailVerified: false,
      displayName: "Paula.Trantow-Wisozk",
      confirmed: true,
      whitelisted: false,
      admin: false,
      createdAt: new Date("2025-12-31T21:46:36.485Z"),
      updatedAt: new Date("2023-11-20T11:07:55.022Z"),
    },
    {
      id: "<id>",
      email: "Dante.Koch82@yahoo.com",
      emailVerified: true,
      displayName: "Dillan.Crona31",
      confirmed: false,
      whitelisted: true,
      admin: true,
      createdAt: new Date("2025-04-28T03:13:22.190Z"),
      updatedAt: new Date("2023-04-29T04:53:38.500Z"),
    },
  ]);
});

test("Admin Get User Workspaces", async () => {
  const testHttpClient = createTestHTTPClient("getUserWorkspaces");

  const speakeasyAdmin = new SpeakeasyAdmin({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["SPEAKEASY_API_KEY"] ?? "value",
  });

  const result = await speakeasyAdmin.admin.getUserWorkspaces({
    userID: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      createdAt: new Date("2023-09-22T05:07:03.340Z"),
      id: "<id>",
      name: "<value>",
      organizationId: "<id>",
      slug: "<value>",
      updatedAt: new Date("2025-07-08T12:21:15.399Z"),
      verified: false,
    },
  ]);
});

test("Admin Get Workspaces", async () => {
  const testHttpClient = createTestHTTPClient("getWorkspaces");

  const speakeasyAdmin = new SpeakeasyAdmin({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["SPEAKEASY_API_KEY"] ?? "value",
  });

  const result = await speakeasyAdmin.admin.getWorkspaces({});
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      createdAt: new Date("2023-05-02T12:00:20.021Z"),
      id: "<id>",
      name: "<value>",
      organizationId: "<id>",
      slug: "<value>",
      updatedAt: new Date("2025-02-18T09:26:30.719Z"),
      verified: false,
    },
    {
      createdAt: new Date("2024-09-24T01:26:57.125Z"),
      id: "<id>",
      name: "<value>",
      organizationId: "<id>",
      slug: "<value>",
      updatedAt: new Date("2024-05-07T16:49:06.396Z"),
      verified: false,
    },
    {
      createdAt: new Date("2023-02-25T19:21:45.571Z"),
      id: "<id>",
      name: "<value>",
      organizationId: "<id>",
      slug: "<value>",
      updatedAt: new Date("2025-06-02T17:47:10.315Z"),
      verified: false,
    },
  ]);
});

test("Admin Get Workspace Users", async () => {
  const testHttpClient = createTestHTTPClient("getWorkspaceUsers");

  const speakeasyAdmin = new SpeakeasyAdmin({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["SPEAKEASY_API_KEY"] ?? "value",
  });

  const result = await speakeasyAdmin.admin.getWorkspaceUsers({
    workspaceID: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      id: "<id>",
      email: "Wendy_Wuckert@gmail.com",
      emailVerified: false,
      displayName: "Eloisa96",
      confirmed: true,
      whitelisted: false,
      admin: false,
      createdAt: new Date("2023-05-23T08:52:09.490Z"),
      updatedAt: new Date("2025-10-15T17:18:11.276Z"),
    },
  ]);
});

test("Admin Search Events", async () => {
  const testHttpClient = createTestHTTPClient("searchEvents");

  const speakeasyAdmin = new SpeakeasyAdmin({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["SPEAKEASY_API_KEY"] ?? "value",
  });

  const result = await speakeasyAdmin.admin.searchEvents({});
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      createdAt: "1728456765507",
      executionId: "<id>",
      interactionType: "TOMBSTONE",
      speakeasyVersion: "<value>",
      success: false,
      workspaceId: "<id>",
    },
  ]);
});

test("Admin Get Organization", async () => {
  const testHttpClient = createTestHTTPClient("getOrganization");

  const speakeasyAdmin = new SpeakeasyAdmin({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["SPEAKEASY_API_KEY"] ?? "value",
  });

  const result = await speakeasyAdmin.admin.getOrganization({});
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: "<id>",
    name: "<value>",
    slug: "<value>",
    accountType: "scale-up",
    telemetryDisabled: true,
    createdAt: new Date("2023-07-23T03:40:42.924Z"),
    updatedAt: new Date("2024-11-01T02:54:44.454Z"),
    ssoActivated: false,
  });
});

test("Admin Get User", async () => {
  const testHttpClient = createTestHTTPClient("getUser");

  const speakeasyAdmin = new SpeakeasyAdmin({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["SPEAKEASY_API_KEY"] ?? "value",
  });

  const result = await speakeasyAdmin.admin.getUser({});
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: "<id>",
    email: "Carolyne_Walsh@hotmail.com",
    emailVerified: true,
    displayName: "King_Renner68",
    confirmed: false,
    whitelisted: false,
    admin: false,
    createdAt: new Date("2023-08-28T03:26:52.335Z"),
    updatedAt: new Date("2023-06-01T08:21:43.132Z"),
  });
});

test("Admin Get Workspace", async () => {
  const testHttpClient = createTestHTTPClient("getWorkspace");

  const speakeasyAdmin = new SpeakeasyAdmin({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["SPEAKEASY_API_KEY"] ?? "value",
  });

  const result = await speakeasyAdmin.admin.getWorkspace({});
  expect(result).toBeDefined();
  expect(result).toEqual({
    createdAt: new Date("2025-06-17T21:39:51.883Z"),
    id: "<id>",
    name: "<value>",
    organizationId: "<id>",
    slug: "<value>",
    updatedAt: new Date("2023-01-05T09:55:04.557Z"),
    verified: true,
  });
});
