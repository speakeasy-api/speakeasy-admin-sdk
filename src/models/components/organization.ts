/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountType,
  AccountType$inboundSchema,
  AccountType$outboundSchema,
} from "./accounttype.js";

/**
 * A speakeasy organization
 */
export type Organization = {
  id: string;
  name: string;
  slug: string;
  accountType: AccountType;
  telemetryDisabled: boolean;
  createdAt: Date;
  updatedAt: Date;
  freeTrialExpiry?: Date | null | undefined;
  ssoConnectionId?: string | null | undefined;
  ssoActivated: boolean;
  internal?: boolean | undefined;
};

/** @internal */
export const Organization$inboundSchema: z.ZodType<
  Organization,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  account_type: AccountType$inboundSchema,
  telemetry_disabled: z.boolean(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  free_trial_expiry: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  sso_connection_id: z.nullable(z.string()).optional(),
  sso_activated: z.boolean(),
  internal: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "account_type": "accountType",
    "telemetry_disabled": "telemetryDisabled",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "free_trial_expiry": "freeTrialExpiry",
    "sso_connection_id": "ssoConnectionId",
    "sso_activated": "ssoActivated",
  });
});

/** @internal */
export type Organization$Outbound = {
  id: string;
  name: string;
  slug: string;
  account_type: string;
  telemetry_disabled: boolean;
  created_at: string;
  updated_at: string;
  free_trial_expiry?: string | null | undefined;
  sso_connection_id?: string | null | undefined;
  sso_activated: boolean;
  internal?: boolean | undefined;
};

/** @internal */
export const Organization$outboundSchema: z.ZodType<
  Organization$Outbound,
  z.ZodTypeDef,
  Organization
> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  accountType: AccountType$outboundSchema,
  telemetryDisabled: z.boolean(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  freeTrialExpiry: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  ssoConnectionId: z.nullable(z.string()).optional(),
  ssoActivated: z.boolean(),
  internal: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    accountType: "account_type",
    telemetryDisabled: "telemetry_disabled",
    createdAt: "created_at",
    updatedAt: "updated_at",
    freeTrialExpiry: "free_trial_expiry",
    ssoConnectionId: "sso_connection_id",
    ssoActivated: "sso_activated",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Organization$ {
  /** @deprecated use `Organization$inboundSchema` instead. */
  export const inboundSchema = Organization$inboundSchema;
  /** @deprecated use `Organization$outboundSchema` instead. */
  export const outboundSchema = Organization$outboundSchema;
  /** @deprecated use `Organization$Outbound` instead. */
  export type Outbound = Organization$Outbound;
}

export function organizationToJSON(organization: Organization): string {
  return JSON.stringify(Organization$outboundSchema.parse(organization));
}

export function organizationFromJSON(
  jsonString: string,
): SafeParseResult<Organization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Organization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Organization' from JSON`,
  );
}
