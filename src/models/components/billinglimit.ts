/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BillingLimit = {
  /**
   * The unique identifier for the organization.
   */
  organizationId: string;
  /**
   * The type of target for the billing limit.
   */
  targetType: string;
  /**
   * The maximum allowed operations.
   */
  operationLimit: number;
  /**
   * Whether exceeding the limit blocks operations.
   */
  blocking: boolean;
  /**
   * The timestamp when the limit was created.
   */
  createdAt: Date;
  /**
   * The timestamp when the limit was last updated.
   */
  updatedAt: Date;
};

/** @internal */
export const BillingLimit$inboundSchema: z.ZodType<
  BillingLimit,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string(),
  target_type: z.string(),
  operation_limit: z.number().int(),
  blocking: z.boolean(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "target_type": "targetType",
    "operation_limit": "operationLimit",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type BillingLimit$Outbound = {
  organization_id: string;
  target_type: string;
  operation_limit: number;
  blocking: boolean;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const BillingLimit$outboundSchema: z.ZodType<
  BillingLimit$Outbound,
  z.ZodTypeDef,
  BillingLimit
> = z.object({
  organizationId: z.string(),
  targetType: z.string(),
  operationLimit: z.number().int(),
  blocking: z.boolean(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    targetType: "target_type",
    operationLimit: "operation_limit",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillingLimit$ {
  /** @deprecated use `BillingLimit$inboundSchema` instead. */
  export const inboundSchema = BillingLimit$inboundSchema;
  /** @deprecated use `BillingLimit$outboundSchema` instead. */
  export const outboundSchema = BillingLimit$outboundSchema;
  /** @deprecated use `BillingLimit$Outbound` instead. */
  export type Outbound = BillingLimit$Outbound;
}

export function billingLimitToJSON(billingLimit: BillingLimit): string {
  return JSON.stringify(BillingLimit$outboundSchema.parse(billingLimit));
}

export function billingLimitFromJSON(
  jsonString: string,
): SafeParseResult<BillingLimit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BillingLimit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BillingLimit' from JSON`,
  );
}
