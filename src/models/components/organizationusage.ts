/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OrganizationUsage = {
  /**
   * Number of operations performed
   */
  numberOfOperations: number;
  /**
   * Maximum Number of operations per SDK specific in contract
   */
  maxOperations: number;
  /**
   * The programming language used
   */
  language: string;
  /**
   * Features that have been used
   */
  usedFeatures: Array<string>;
  /**
   * Features that are accessible
   */
  accessibleFeatures: Array<string>;
  /**
   * Indicates if the features are accessible
   */
  accessible: boolean;
  /**
   * List of workspace IDs
   */
  workspaces: Array<string>;
  /**
   * List of generation lock IDs
   */
  genLockIds: Array<string>;
};

/** @internal */
export const OrganizationUsage$inboundSchema: z.ZodType<
  OrganizationUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  number_of_operations: z.number().int(),
  max_operations: z.number().int(),
  language: z.string(),
  used_features: z.array(z.string()),
  accessible_features: z.array(z.string()),
  accessible: z.boolean(),
  workspaces: z.array(z.string()),
  gen_lock_ids: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "number_of_operations": "numberOfOperations",
    "max_operations": "maxOperations",
    "used_features": "usedFeatures",
    "accessible_features": "accessibleFeatures",
    "gen_lock_ids": "genLockIds",
  });
});

/** @internal */
export type OrganizationUsage$Outbound = {
  number_of_operations: number;
  max_operations: number;
  language: string;
  used_features: Array<string>;
  accessible_features: Array<string>;
  accessible: boolean;
  workspaces: Array<string>;
  gen_lock_ids: Array<string>;
};

/** @internal */
export const OrganizationUsage$outboundSchema: z.ZodType<
  OrganizationUsage$Outbound,
  z.ZodTypeDef,
  OrganizationUsage
> = z.object({
  numberOfOperations: z.number().int(),
  maxOperations: z.number().int(),
  language: z.string(),
  usedFeatures: z.array(z.string()),
  accessibleFeatures: z.array(z.string()),
  accessible: z.boolean(),
  workspaces: z.array(z.string()),
  genLockIds: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    numberOfOperations: "number_of_operations",
    maxOperations: "max_operations",
    usedFeatures: "used_features",
    accessibleFeatures: "accessible_features",
    genLockIds: "gen_lock_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationUsage$ {
  /** @deprecated use `OrganizationUsage$inboundSchema` instead. */
  export const inboundSchema = OrganizationUsage$inboundSchema;
  /** @deprecated use `OrganizationUsage$outboundSchema` instead. */
  export const outboundSchema = OrganizationUsage$outboundSchema;
  /** @deprecated use `OrganizationUsage$Outbound` instead. */
  export type Outbound = OrganizationUsage$Outbound;
}

export function organizationUsageToJSON(
  organizationUsage: OrganizationUsage,
): string {
  return JSON.stringify(
    OrganizationUsage$outboundSchema.parse(organizationUsage),
  );
}

export function organizationUsageFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationUsage' from JSON`,
  );
}
