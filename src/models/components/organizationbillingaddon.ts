/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BillingAddOn,
  BillingAddOn$inboundSchema,
  BillingAddOn$outboundSchema,
} from "./billingaddon.js";

export type OrganizationBillingAddOn = {
  /**
   * The unique identifier for the organization.
   */
  organizationId: string;
  addOn: BillingAddOn;
  /**
   * The timestamp when the add-on was created.
   */
  createdAt: Date;
};

/** @internal */
export const OrganizationBillingAddOn$inboundSchema: z.ZodType<
  OrganizationBillingAddOn,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string(),
  add_on: BillingAddOn$inboundSchema,
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "add_on": "addOn",
    "created_at": "createdAt",
  });
});

/** @internal */
export type OrganizationBillingAddOn$Outbound = {
  organization_id: string;
  add_on: string;
  created_at: string;
};

/** @internal */
export const OrganizationBillingAddOn$outboundSchema: z.ZodType<
  OrganizationBillingAddOn$Outbound,
  z.ZodTypeDef,
  OrganizationBillingAddOn
> = z.object({
  organizationId: z.string(),
  addOn: BillingAddOn$outboundSchema,
  createdAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    addOn: "add_on",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationBillingAddOn$ {
  /** @deprecated use `OrganizationBillingAddOn$inboundSchema` instead. */
  export const inboundSchema = OrganizationBillingAddOn$inboundSchema;
  /** @deprecated use `OrganizationBillingAddOn$outboundSchema` instead. */
  export const outboundSchema = OrganizationBillingAddOn$outboundSchema;
  /** @deprecated use `OrganizationBillingAddOn$Outbound` instead. */
  export type Outbound = OrganizationBillingAddOn$Outbound;
}

export function organizationBillingAddOnToJSON(
  organizationBillingAddOn: OrganizationBillingAddOn,
): string {
  return JSON.stringify(
    OrganizationBillingAddOn$outboundSchema.parse(organizationBillingAddOn),
  );
}

export function organizationBillingAddOnFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationBillingAddOn, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationBillingAddOn$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationBillingAddOn' from JSON`,
  );
}
