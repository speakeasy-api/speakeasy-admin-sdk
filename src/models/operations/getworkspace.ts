/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetWorkspaceRequest = {
  /**
   * Unique identifier of the workspace.
   */
  workspaceId?: string | undefined;
  /**
   * URL-friendly identifier of the organization.
   */
  organizationSlug?: string | undefined;
  /**
   * URL-friendly identifier of the workspace.
   */
  workspaceSlug?: string | undefined;
};

/** @internal */
export const GetWorkspaceRequest$inboundSchema: z.ZodType<
  GetWorkspaceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string().optional(),
  organization_slug: z.string().optional(),
  workspace_slug: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
    "organization_slug": "organizationSlug",
    "workspace_slug": "workspaceSlug",
  });
});

/** @internal */
export type GetWorkspaceRequest$Outbound = {
  workspace_id?: string | undefined;
  organization_slug?: string | undefined;
  workspace_slug?: string | undefined;
};

/** @internal */
export const GetWorkspaceRequest$outboundSchema: z.ZodType<
  GetWorkspaceRequest$Outbound,
  z.ZodTypeDef,
  GetWorkspaceRequest
> = z.object({
  workspaceId: z.string().optional(),
  organizationSlug: z.string().optional(),
  workspaceSlug: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
    organizationSlug: "organization_slug",
    workspaceSlug: "workspace_slug",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceRequest$ {
  /** @deprecated use `GetWorkspaceRequest$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceRequest$inboundSchema;
  /** @deprecated use `GetWorkspaceRequest$outboundSchema` instead. */
  export const outboundSchema = GetWorkspaceRequest$outboundSchema;
  /** @deprecated use `GetWorkspaceRequest$Outbound` instead. */
  export type Outbound = GetWorkspaceRequest$Outbound;
}

export function getWorkspaceRequestToJSON(
  getWorkspaceRequest: GetWorkspaceRequest,
): string {
  return JSON.stringify(
    GetWorkspaceRequest$outboundSchema.parse(getWorkspaceRequest),
  );
}

export function getWorkspaceRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkspaceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkspaceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkspaceRequest' from JSON`,
  );
}
