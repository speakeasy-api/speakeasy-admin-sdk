/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SearchEventsRequest = {
  generateTarget?: string | undefined;
  executionId?: string | undefined;
  generateGenLockId?: string | undefined;
  interactionType?: components.InteractionType | undefined;
  lintReportDigest?: string | undefined;
  openapiDiffReportDigest?: string | undefined;
  sourceRevisionDigest?: string | undefined;
  workspaceId?: string | undefined;
  limit?: number | undefined;
  success?: boolean | undefined;
};

/** @internal */
export const SearchEventsRequest$inboundSchema: z.ZodType<
  SearchEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  generate_target: z.string().optional(),
  execution_id: z.string().optional(),
  generate_gen_lock_id: z.string().optional(),
  interaction_type: components.InteractionType$inboundSchema.optional(),
  lint_report_digest: z.string().optional(),
  openapi_diff_report_digest: z.string().optional(),
  source_revision_digest: z.string().optional(),
  workspace_id: z.string().optional(),
  limit: z.number().int().default(250),
  success: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "generate_target": "generateTarget",
    "execution_id": "executionId",
    "generate_gen_lock_id": "generateGenLockId",
    "interaction_type": "interactionType",
    "lint_report_digest": "lintReportDigest",
    "openapi_diff_report_digest": "openapiDiffReportDigest",
    "source_revision_digest": "sourceRevisionDigest",
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type SearchEventsRequest$Outbound = {
  generate_target?: string | undefined;
  execution_id?: string | undefined;
  generate_gen_lock_id?: string | undefined;
  interaction_type?: string | undefined;
  lint_report_digest?: string | undefined;
  openapi_diff_report_digest?: string | undefined;
  source_revision_digest?: string | undefined;
  workspace_id?: string | undefined;
  limit: number;
  success?: boolean | undefined;
};

/** @internal */
export const SearchEventsRequest$outboundSchema: z.ZodType<
  SearchEventsRequest$Outbound,
  z.ZodTypeDef,
  SearchEventsRequest
> = z.object({
  generateTarget: z.string().optional(),
  executionId: z.string().optional(),
  generateGenLockId: z.string().optional(),
  interactionType: components.InteractionType$outboundSchema.optional(),
  lintReportDigest: z.string().optional(),
  openapiDiffReportDigest: z.string().optional(),
  sourceRevisionDigest: z.string().optional(),
  workspaceId: z.string().optional(),
  limit: z.number().int().default(250),
  success: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    generateTarget: "generate_target",
    executionId: "execution_id",
    generateGenLockId: "generate_gen_lock_id",
    interactionType: "interaction_type",
    lintReportDigest: "lint_report_digest",
    openapiDiffReportDigest: "openapi_diff_report_digest",
    sourceRevisionDigest: "source_revision_digest",
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchEventsRequest$ {
  /** @deprecated use `SearchEventsRequest$inboundSchema` instead. */
  export const inboundSchema = SearchEventsRequest$inboundSchema;
  /** @deprecated use `SearchEventsRequest$outboundSchema` instead. */
  export const outboundSchema = SearchEventsRequest$outboundSchema;
  /** @deprecated use `SearchEventsRequest$Outbound` instead. */
  export type Outbound = SearchEventsRequest$Outbound;
}

export function searchEventsRequestToJSON(
  searchEventsRequest: SearchEventsRequest,
): string {
  return JSON.stringify(
    SearchEventsRequest$outboundSchema.parse(searchEventsRequest),
  );
}

export function searchEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchEventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchEventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchEventsRequest' from JSON`,
  );
}
