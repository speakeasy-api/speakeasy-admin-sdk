/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetWorkspaceUsersRequest = {
  /**
   * Unique identifier of the workspace.
   */
  workspaceID: string;
};

/** @internal */
export const GetWorkspaceUsersRequest$inboundSchema: z.ZodType<
  GetWorkspaceUsersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspaceID: z.string(),
});

/** @internal */
export type GetWorkspaceUsersRequest$Outbound = {
  workspaceID: string;
};

/** @internal */
export const GetWorkspaceUsersRequest$outboundSchema: z.ZodType<
  GetWorkspaceUsersRequest$Outbound,
  z.ZodTypeDef,
  GetWorkspaceUsersRequest
> = z.object({
  workspaceID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceUsersRequest$ {
  /** @deprecated use `GetWorkspaceUsersRequest$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceUsersRequest$inboundSchema;
  /** @deprecated use `GetWorkspaceUsersRequest$outboundSchema` instead. */
  export const outboundSchema = GetWorkspaceUsersRequest$outboundSchema;
  /** @deprecated use `GetWorkspaceUsersRequest$Outbound` instead. */
  export type Outbound = GetWorkspaceUsersRequest$Outbound;
}

export function getWorkspaceUsersRequestToJSON(
  getWorkspaceUsersRequest: GetWorkspaceUsersRequest,
): string {
  return JSON.stringify(
    GetWorkspaceUsersRequest$outboundSchema.parse(getWorkspaceUsersRequest),
  );
}

export function getWorkspaceUsersRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkspaceUsersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkspaceUsersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkspaceUsersRequest' from JSON`,
  );
}
