/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetUserWorkspacesRequest = {
  /**
   * Unique identifier of the user.
   */
  userID: string;
};

/** @internal */
export const GetUserWorkspacesRequest$inboundSchema: z.ZodType<
  GetUserWorkspacesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  userID: z.string(),
});

/** @internal */
export type GetUserWorkspacesRequest$Outbound = {
  userID: string;
};

/** @internal */
export const GetUserWorkspacesRequest$outboundSchema: z.ZodType<
  GetUserWorkspacesRequest$Outbound,
  z.ZodTypeDef,
  GetUserWorkspacesRequest
> = z.object({
  userID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserWorkspacesRequest$ {
  /** @deprecated use `GetUserWorkspacesRequest$inboundSchema` instead. */
  export const inboundSchema = GetUserWorkspacesRequest$inboundSchema;
  /** @deprecated use `GetUserWorkspacesRequest$outboundSchema` instead. */
  export const outboundSchema = GetUserWorkspacesRequest$outboundSchema;
  /** @deprecated use `GetUserWorkspacesRequest$Outbound` instead. */
  export type Outbound = GetUserWorkspacesRequest$Outbound;
}

export function getUserWorkspacesRequestToJSON(
  getUserWorkspacesRequest: GetUserWorkspacesRequest,
): string {
  return JSON.stringify(
    GetUserWorkspacesRequest$outboundSchema.parse(getUserWorkspacesRequest),
  );
}

export function getUserWorkspacesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetUserWorkspacesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserWorkspacesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserWorkspacesRequest' from JSON`,
  );
}
