/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetOrganizationUsageRequest = {
  /**
   * Unique identifier of the organization.
   */
  organizationID: string;
};

/** @internal */
export const GetOrganizationUsageRequest$inboundSchema: z.ZodType<
  GetOrganizationUsageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organizationID: z.string(),
});

/** @internal */
export type GetOrganizationUsageRequest$Outbound = {
  organizationID: string;
};

/** @internal */
export const GetOrganizationUsageRequest$outboundSchema: z.ZodType<
  GetOrganizationUsageRequest$Outbound,
  z.ZodTypeDef,
  GetOrganizationUsageRequest
> = z.object({
  organizationID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrganizationUsageRequest$ {
  /** @deprecated use `GetOrganizationUsageRequest$inboundSchema` instead. */
  export const inboundSchema = GetOrganizationUsageRequest$inboundSchema;
  /** @deprecated use `GetOrganizationUsageRequest$outboundSchema` instead. */
  export const outboundSchema = GetOrganizationUsageRequest$outboundSchema;
  /** @deprecated use `GetOrganizationUsageRequest$Outbound` instead. */
  export type Outbound = GetOrganizationUsageRequest$Outbound;
}

export function getOrganizationUsageRequestToJSON(
  getOrganizationUsageRequest: GetOrganizationUsageRequest,
): string {
  return JSON.stringify(
    GetOrganizationUsageRequest$outboundSchema.parse(
      getOrganizationUsageRequest,
    ),
  );
}

export function getOrganizationUsageRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetOrganizationUsageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrganizationUsageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrganizationUsageRequest' from JSON`,
  );
}
